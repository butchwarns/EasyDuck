name: Release Pipeline
on:
  push:
    tags:
      - "v*"

concurrency:
  group: build-${{ github.ref || github.run_id }}

jobs:
  release_pipeline:
    name: release_pipeline
    runs-on: macos-latest
    steps:
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "15.1"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          submodules: recursive

      - name: Determine release type
        id: set_release_type
        run: |
          if [[ "${GITHUB_REF##*/}" == *pre ]]; then
            echo "Release type: prerelease"
            echo "RELEASE_TYPE=pre" >> $GITHUB_ENV
          else
            echo "Release type: production"
            echo "RELEASE_TYPE=prod" >> $GITHUB_ENV
          fi

      - name: "build_and_copy.sh release"
        run: |
          ./pipelines/build_and_copy.sh release
        shell: bash

      - name: "validate.sh"
        run: |
          ./pipelines/validate.sh
        shell: bash

      - name: "codesign_notarize_plugins.sh"
        run: |
          ./pipelines/codesign_notarize_plugins.sh
        shell: bash
        env:
          MACOS_CERTIFICATE: ${{ secrets.PROD_MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_PWD }}
          MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_NAME }}
          MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
          PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
          PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
          PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}

      - name: Download Packages installer build tool
        run: wget http://s.sudre.free.fr/Software/files/Packages.dmg --retry-on-host-error

      - name: Mount Packages image
        run: hdiutil attach Packages.dmg

      - name: Install Packages
        run: sudo installer -pkg /Volumes/Packages\ 1.2.10/Install\ Packages.pkg -target /

      - name: "package.sh"
        run: |
          ./pipelines/package.sh

      - name: "codesign_notarize_installer.sh"
        run: |
          ./pipelines/codesign_notarize_installer.sh
        env:
          MACOS_CERTIFICATE_INSTALLER: ${{ secrets.PROD_MACOS_CERTIFICATE_INSTALLER }}
          MACOS_CERTIFICATE_INSTALLER_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_INSTALLER_PWD }}
          MACOS_CERTIFICATE_INSTALLER_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_INSTALLER_NAME }}
          MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
          PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
          PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
          PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}

      - name: "bundle.sh"
        run: |
          ./pipelines/bundle.sh

      - name: "Extract tag name"
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        env:
          GITHUB_REF: ${{ github.ref }}

      - name: "Upload Release"
        run: |
          if [ "${{ env.RELEASE_TYPE }}" == "prod" ]; then
            ./pipelines/upload_release.sh ${{ env.TAG_NAME }}
          elif [ "${{ env.RELEASE_TYPE }}" == "pre" ]; then
            ./pipelines/upload_release.sh ${{ env.TAG_NAME }} --prerelease
          else
            echo "Unknown release type!"
            exit 1
          fi
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: upload_artifact
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: pipelines/bin/easyduck_*.zip
          retention-days: 30
