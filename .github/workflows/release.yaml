name: Release Pipeline
on:
  push:
    tags:
      - "v*"

concurrency:
  group: build-${{ github.ref || github.run_id }}

jobs:
  release_pipeline:
    name: release_pipeline
    runs-on: macos-latest
    steps:
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "15.1"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          submodules: recursive

      - name: Fetch branches
        run: git fetch --all

      - name: Get branch name
        id: get_branch_name
        run: |
          # Find the branch that contains the tag
          BRANCH=$(git branch --contains ${GITHUB_REF} | grep -v "detached" | sed 's/* //')
          echo "Branch name for ${GITHUB_REF}: $BRANCH"
          echo "BRANCH_NAME=$BRANCH" >> $GITHUB_ENV

      - name: Set release type
        id: set_release_type
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            if [[ "${BRANCH_NAME}" == "main" ]]; then
              echo "RELEASE_TYPE=regular" >> $GITHUB_ENV
            elif [[ "${BRANCH_NAME}" == "develop" ]]; then
              echo "RELEASE_TYPE=prerelease" >> $GITHUB_ENV
            else
              echo "RELEASE_TYPE=unknown" >> $GITHUB_ENV
            fi
          fi
        env:
          GITHUB_REF: ${{ github.ref }}
          BRANCH_NAME: ${{ env.BRANCH_NAME }}

      - name: "build_and_copy.sh release"
        run: |
          ./pipelines/build_and_copy.sh release
        shell: bash

      - name: "validate.sh"
        run: |
          ./pipelines/validate.sh
        shell: bash

      - name: "codesign_notarize_plugins.sh"
        run: |
          ./pipelines/codesign_notarize_plugins.sh
        shell: bash
        env:
          MACOS_CERTIFICATE: ${{ secrets.PROD_MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_PWD }}
          MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_NAME }}
          MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
          PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
          PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
          PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}

      - name: Download Packages installer build tool
        run: wget http://s.sudre.free.fr/Software/files/Packages.dmg --retry-on-host-error

      - name: Mount Packages image
        run: hdiutil attach Packages.dmg

      - name: Install Packages
        run: sudo installer -pkg /Volumes/Packages\ 1.2.10/Install\ Packages.pkg -target /

      - name: "package.sh"
        run: |
          ./pipelines/package.sh

      - name: "codesign_notarize_installer.sh"
        run: |
          ./pipelines/codesign_notarize_installer.sh
        env:
          MACOS_CERTIFICATE_INSTALLER: ${{ secrets.PROD_MACOS_CERTIFICATE_INSTALLER }}
          MACOS_CERTIFICATE_INSTALLER_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_INSTALLER_PWD }}
          MACOS_CERTIFICATE_INSTALLER_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_INSTALLER_NAME }}
          MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
          PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
          PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
          PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}

      - name: "bundle.sh"
        run: |
          ./pipelines/bundle.sh

      - name: "Extract tag name"
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        env:
          GITHUB_REF: ${{ github.ref }}

      - name: "Upload Release"
        run: |
          if [ "${{ env.RELEASE_TYPE }}" == "regular" ]; then
            ./pipelines/upload_release.sh ${{ env.TAG_NAME }}
          elif [ "${{ env.RELEASE_TYPE }}" == "prerelease" ]; then
            ./pipelines/upload_release.sh ${{ env.TAG_NAME }} --prerelease
          else
            echo "Unknown release type"
            exit 1
          fi
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}

      - name: upload_artifact
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: pipelines/bin/easyduck_*.zip
          retention-days: 30
